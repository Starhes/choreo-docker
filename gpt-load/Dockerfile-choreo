# Stage 0: Clone the source code from GitHub
# We use a minimal alpine image with git installed.
# This stage's only purpose is to fetch the source for subsequent stages.
FROM alpine:latest AS cloner
RUN apk add --no-cache git
WORKDIR /source
# Clone only the latest commit (--depth 1) to keep the image layer small
RUN git clone --depth 1 https://github.com/tbphp/gpt-load.git .


# Stage 1: Build the frontend (Node.js app)
FROM node:20-alpine AS builder-frontend
WORKDIR /build
# CORRECTED PATH: Copy the frontend source code from the '/source/web' directory in the 'cloner' stage
COPY --from=cloner /source/web .
# Install dependencies and build the static assets
RUN npm install
RUN VITE_VERSION=1.0.0 npm run build # Using a default version, can be an ARG


# Stage 2: Build the backend (Go application)
FROM golang:1.21-alpine AS builder-backend
# Set build arguments and environment variables
ARG VERSION=1.0.0
ENV GO111MODULE=on \
    CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64
WORKDIR /build
# CORRECTED PATH: Copy Go module files first from the '/source' directory
COPY --from=cloner /source/go.mod /source/go.sum ./
RUN go mod download
# CORRECTED PATH: Copy the rest of the backend source code from the '/source' directory
COPY --from=cloner /source/. .
# Copy the built frontend static files from the frontend builder stage
COPY --from=builder-frontend /build/dist ./web/dist
# Build the final Go binary
RUN go build -ldflags "-s -w -X gpt-load/internal/version.Version=${VERSION}" -o gpt-load


# Stage 3: Final production image
# Start from a fresh, minimal alpine image
FROM alpine:latest
WORKDIR /app

# Install only necessary packages for production
RUN apk upgrade --no-cache \
    && apk add --no-cache ca-certificates tzdata \
    && update-ca-certificates

# --- Choreo Specific Requirement ---
# Create a dedicated, non-root user with a UID in the valid range (10000-20000)
RUN addgroup -S -g 10014 choreo && \
    adduser -S -u 10014 -G choreo --no-create-home choreouser
# --- End of Choreo Specific Requirement ---

# Copy the compiled application binary from the backend builder stage
COPY --from=builder-backend /build/gpt-load .

# Switch execution to the non-root user
USER 10014

# Expose the port the application listens on
EXPOSE 3001

# Set the entrypoint for the container
ENTRYPOINT ["/app/gpt-load"]
